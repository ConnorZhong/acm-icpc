#include <stdio.h>
#include <cstring>
typedef unsigned int UL;
typedef long long LL;
const int maxn = 92, maxd = 3, maxs = 144, maxm = 8;
const UL mod_1 = (1U << 30) - 1;
const int ctr[maxn][maxd] = {{3, 1, 0}, {4, 1, 2}, {6, 4, 2}, {6, 3, 3}, {3, 0, 1}, {4, 0, 1}, {7, 4, 1}, {4, 1, 1}, {5, 2, 1}, {6, 3, 1}, {6, 2, 2}, {9, 3, 2}, {7, 3, 2}, {9, 3, 2}, {11, 4, 3}, {20, 14, 8}, {20, 13, 9}, {13, 8, 5}, {8, 3, 3}, {15, 8, 5}, {7, 6, 1}, {11, 11, 2}, {11, 10, 3}, {3, 1, 1}, {3, 3, 1}, {5, 4, 1}, {5, 3, 2}, {5, 1, 2}, {1, 1, 0}, {3, 5, 1}, {3, 4, 2}, {10, 9, 4}, {1, 0, 1}, {4, 1, 1}, {14, 12, 6}, {14, 11, 7}, {4, 3, 1}, {1, 1, 1}, {3, 1, 1}, {3, 2, 1}, {5, 4, 1}, {8, 7, 3}, {8, 6, 4}, {3, 1, 2}, {6, 2, 2}, {4, 2, 2}, {3, 2, 2}, {4, 2, 2}, {5, 5, 2}, {8, 9, 3}, {13, 17, 4}, {13, 16, 5}, {10, 6, 4}, {5, 2, 3}, {3, 3, 1}, {3, 2, 2}, {5, 3, 3}, {6, 4, 3}, {10, 7, 4}, {6, 6, 5}, {0, 2, 0}, {0, 0, 1}, {2, 1, 1}, {4, 2, 1}, {6, 6, 2}, {6, 5, 3}, {3, 3, 1}, {2, 0, 2}, {4, 0, 2}, {5, 1, 2}, {6, 2, 2}, {8, 5, 3}, {13, 10, 5}, {13, 9, 6}, {4, 3, 2}, {6, 4, 2}, {6, 3, 3}, {9, 4, 3}, {10, 5, 3}, {13, 7, 4}, {11, 8, 4}, {8, 4, 4}, {3, 1, 2}, {2, 1, 2}, {6, 6, 3}, {2, 1, 3}, {4, 3, 3}, {4, 2, 4}, {1, 1, 1}, {10, 13, 4}, {10, 14, 3}, {2, 2, 1}};
const int nxt[maxs][2] = {{0, 62}, {1, 63}, {1, 61}, {2, 64}, {3, 65}, {4, 67}, {5, 68}, {6, 83}, {6, 54}, {7, 69}, {8, 70}, {9, 75}, {10, 76}, {11, 81}, {12, 77}, {13, 78}, {14, 79}, {15, 80}, {15, 28}, {15, 90}, {16, 80}, {16, 28}, {16, 89}, {17, 80}, {17, 29}, {18, 74}, {18, 28}, {18, 91}, {19, 74}, {19, 31}, {20, 71}, {21, 72}, {22, 73}, {23, 82}, {24, 85}, {25, 86}, {26, 87}, {27, 88}, {27, 91}, {28, 0}, {29, 2}, {30, 3}, {31, 1}, {31, 60}, {31, 28}, {31, 84}, {32, 4}, {33, 27}, {34, 23}, {34, 32}, {34, 60}, {34, 28}, {34, 90}, {35, 23}, {35, 32}, {35, 60}, {35, 28}, {35, 89}, {36, 6}, {37, 7}, {38, 8}, {39, 9}, {40, 20}, {41, 21}, {42, 22}, {43, 10}, {44, 18}, {45, 11}, {46, 12}, {47, 13}, {48, 14}, {49, 17}, {50, 15}, {51, 16}, {52, 19}, {53, 5}, {53, 60}, {53, 28}, {53, 91}, {54, 25}, {55, 26}, {56, 24}, {56, 28}, {56, 91}, {57, 24}, {57, 28}, {57, 66}, {58, 24}, {58, 28}, {58, 84}, {59, 24}, {59, 28}, {59, 67}, {59, 60}, {59, 28}, {59, 88}, {60, 60}, {61, 32}, {62, 39}, {63, 40}, {64, 41}, {65, 42}, {66, 37}, {66, 38}, {67, 43}, {68, 47}, {69, 53}, {70, 48}, {71, 49}, {72, 50}, {73, 51}, {74, 46}, {74, 37}, {75, 46}, {75, 54}, {76, 46}, {76, 55}, {77, 46}, {77, 56}, {78, 46}, {78, 57}, {79, 46}, {79, 58}, {80, 46}, {80, 59}, {81, 46}, {81, 32}, {81, 60}, {81, 28}, {81, 91}, {82, 44}, {83, 45}, {84, 52}, {85, 37}, {85, 28}, {85, 88}, {86, 37}, {86, 29}, {87, 37}, {87, 30}, {88, 33}, {89, 35}, {90, 34}, {91, 36}};
const char *seq[maxm + 1] = {"", "1", "11", "21", "1211", "111221", "312211", "13112221", "1113213211"};
struct Matrix
{
	int r, c;
	UL num[maxn][maxn];
	Matrix operator * (const Matrix &t) const
	{
		Matrix ret = {r, t.c};
		for(int i = 0; i < r; ++i)
			for(int j = 0; j < c; ++j)
				for(int k = 0; k < t.c; ++k)
					ret.num[i][k] += num[i][j] * t.num[j][k];
		return ret;
	}
	Matrix pow(LL k) const
	{
		Matrix ret = {r, r}, tmp = *this;
		for(int i = 0; i < r; ++i)
			ret.num[i][i] = 1;
		for( ; k > 0; k >>= 1, tmp = tmp * tmp)
			if(k & 1)
				ret = ret * tmp;
		return ret;
	}
} A, B;
int main()
{
	A.r = A.c = maxn;
	for(int i = 0; i < maxs; ++i)
		++A.num[nxt[i][0]][nxt[i][1]];
	for(LL n; scanf("%lld", &n) == 1; )
	{
		UL cnt[maxd] = {};
		if(n <= maxm)
			for(int i = 0; seq[n][i]; ++i)
				++cnt[seq[n][i] - '1'];
		else
		{
			B.r = 1, B.c = maxn;
			memset(B.num, 0, sizeof B.num);
			++B.num[0][23], ++B.num[0][38];
			B = B * A.pow(n - maxm);
			for(int i = 0; i < maxn; ++i)
				for(int j = 0; j < maxd; ++j)
					cnt[j] += B.num[0][i] * ctr[i][j];
		}
		for(int i = 0; i < maxd; ++i)
			printf("%u%c", cnt[i] & mod_1, ",\n"[i == maxd - 1]);
	}
	return 0;
}
